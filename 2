import pygame
import math
import random
random.seed
FPS = 120
black = (0,0,0)
green = (0, 255, 0)
red=(255,0,0)
pygame.init()
sc = pygame.display.set_mode((600, 600))
st = pygame.display.set_caption('Шары')

class  circles():
	
	def __init__(self, R1, M1, P1, a1, R2, M2, P2, a2):
		self.r1 = R1
		self.x1 = random.randint(R1, 600-R1)
		self.y1 = random.randint(R1, 300-R1)
		self.m1 = M1
		self.p1= P1
		self.a1 = math.radians(a1)
		self.r2 = R2
		self.x2 = random.randint(R2, 600-R2)
		self.y2 = random.randint(300+R2, 600-R2)
		self.m2 = M2
		self.p2 = P2
		self.a2 = math.radians(a2)
		
	def square1 (self):
		S=self.r1*self.r1*3.14
		return S
	
	def lenth1 (self):
		L=2*self.r1*3.14
		return L
	
	def speed1(self):
		return self.p1/self.m1
			
	def kord1(self):
		return self.x1, self.y1
		
	def square2(self):
		S=self.r2*self.r2*3.14
		return S
	
	def lenth2 (self):
		L=2*self.r2*3.14
		return L
	
	def speed2(self):
		return self.p2/self.m2
			
	def kord2(self):
		return self.x2, self.y2
	
	def force1(self,f,a,t):
		px=self.p1*math.cos(self.a1)
		py=self.p1*math.sin(self.a1)
		self.p1=math.sqrt((px+f*math.cos(a)*t)*(px+f*math.cos(a)*t)+(py+f*math.sin(a)*t)*(py+f*math.sin(a)*t))
		self.a1=math.acos(px/self.p1)
	
	def force2(self,f,a,t):
		px=self.p2*math.cos(self.a2)
		py=self.p2*math.sin(self.a2)
		self.p2=math.sqrt((px+f*math.cos(a)*t)*(px+f*math.cos(a)*t)+(py+f*math.sin(a)*t)*(py+f*math.sin(a)*t))
		self.a2=math.acos(px/self.p2)
	
	def show(self):
		direct_x1 = self.p1*math.cos(self.a1)/self.m1
		direct_y1= self.p1*math.sin(self.a1)/self.m1
		direct_x2 = self.p2*math.cos(self.a2)/self.m2
		direct_y2= self.p2*math.sin(self.a2)/self.m2
		clock = pygame.time.Clock()
		while 1:
			sc.fill(black)
			for i in pygame.event.get():
				if i.type == pygame.QUIT: exit()
			pygame.draw.circle(sc, green, (int(self.x1), 600-int(self.y1)),self.r1)
			pygame.draw.circle(sc, red, (int(self.x2), 600-int(self.y2)),self.r2)
			pygame.display.update()
			self.x1 += direct_x1 
			self.y1 += direct_y1
			self.x2 += direct_x2 
			self.y2 += direct_y2
			l=math.sqrt((self.x1-self.x2)*(self.x1-self.x2)+(self.y1-self.y2)*(self.y1-self.y2))
			
			
			
			
			if int(l)-2 <= self.r1+self.r2:
				a=math.acos((self.x1-self.x2)/l)
				a1=self.a1+a
				a2=self.a2+a
				V0x1=self.p1/self.m1*math.cos(a1)
				V0x2=self.p2/self.m2*math.cos(a2)
				Vy1=self.p1/self.m1*math.sin(a1)
				Vy2=self.p2/self.m2*math.sin(a2)
				Vx1=((self.m1-self.m2)*V0x1+2*self.m2*V0x2)/(self.m1+self.m2)
				Vx2=((self.m2-self.m1)*V0x2+2*self.m1*V0x1)/(self.m1+self.m2)
				V1=math.sqrt(Vx1*Vx1+Vy1*Vy1)
				V2=math.sqrt(Vx2*Vx2+Vy2*Vy2)
				direct_x1 = Vx1*math.cos(a)+Vy1*math.sin(a)
				direct_y1 = Vy1*math.cos(a)+Vx1*math.sin(a)
				direct_x2 = Vx2*math.cos(a)+Vy2*math.sin(a)
				direct_y2 = Vy2*math.cos(a)+Vx2*math.sin(a)
				self.a1=math.acos(direct_x1/V1)
				self.a2=math.acos(direct_x2/V2)
				self.p1=self.m1*V1
				self.p2=self.m2*V2
				
				
				
			if (self.x1 >= 600 - self.r1) or (self.x1 <= self.r1): 
				direct_x1 = -direct_x1
				self.a1+=math.pi/2
			if (self.y1>= 600 - self.r1) or (self.y1 <= self.r1):
				 direct_y1 = -direct_y1 
				 self.a1+=math.pi/2
			if (self.x2 >= 600 - self.r2) or (self.x2 <= self.r2):
				 direct_x2 = -direct_x2
				 self.a2+=math.pi/2
			if (self.y2>= 600 - self.r2) or (self.y2 <= self.r2):
				 direct_y2 = -direct_y2 
				 self.a2+=math.pi/2
			clock.tick(FPS)


rheu = circles(50, 1,3,45, 50, 1,3,30)
rheu.show()
